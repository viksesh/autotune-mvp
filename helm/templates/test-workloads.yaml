{{- /*
  This file creates multiple Deployments in one go. Each workload references the .Values.workloads
  structure for configuration. Each workload is only rendered if enabled == true.
*/ -}}

{{- if .Values.workloads.overprovisionedCpu.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.workloads.overprovisionedCpu.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.workloads.overprovisionedCpu.name }}
    container-efficiency.io/autotune: "{{ .Values.workloads.overprovisionedCpu.autotune }}"
    container-efficiency.io/tune-cpu: "{{ .Values.workloads.overprovisionedCpu.tuneCpu }}"
    container-efficiency.io/tune-memory: "{{ .Values.workloads.overprovisionedCpu.tuneMemory }}"
    container-efficiency.io/tune-limits: "{{ .Values.workloads.overprovisionedCpu.tuneLimits }}"
spec:
  replicas: {{ .Values.workloads.overprovisionedCpu.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.workloads.overprovisionedCpu.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.workloads.overprovisionedCpu.name }}
    spec:
      containers:
      - name: {{ .Values.workloads.overprovisionedCpu.name }}
        image: {{ .Values.workloads.overprovisionedCpu.image }}
        command: {{ toYaml .Values.workloads.overprovisionedCpu.command | nindent 8 }}
        resources:
          requests:
            cpu: {{ .Values.workloads.overprovisionedCpu.cpuRequest }}
            memory: {{ .Values.workloads.overprovisionedCpu.memRequest }}
          limits:
            cpu: {{ .Values.workloads.overprovisionedCpu.cpuLimit }}
            memory: {{ .Values.workloads.overprovisionedCpu.memLimit }}
{{- end }}

{{- if .Values.workloads.overprovisionedMemory.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.workloads.overprovisionedMemory.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.workloads.overprovisionedMemory.name }}
    container-efficiency.io/autotune: "{{ .Values.workloads.overprovisionedMemory.autotune }}"
    container-efficiency.io/tune-cpu: "{{ .Values.workloads.overprovisionedMemory.tuneCpu }}"
    container-efficiency.io/tune-memory: "{{ .Values.workloads.overprovisionedMemory.tuneMemory }}"
    container-efficiency.io/tune-limits: "{{ .Values.workloads.overprovisionedMemory.tuneLimits }}"
spec:
  replicas: {{ .Values.workloads.overprovisionedMemory.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.workloads.overprovisionedMemory.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.workloads.overprovisionedMemory.name }}
    spec:
      containers:
      - name: {{ .Values.workloads.overprovisionedMemory.name }}
        image: {{ .Values.workloads.overprovisionedMemory.image }}
        command: {{ toYaml .Values.workloads.overprovisionedMemory.command | nindent 8 }}
        resources:
          requests:
            cpu: {{ .Values.workloads.overprovisionedMemory.cpuRequest }}
            memory: {{ .Values.workloads.overprovisionedMemory.memRequest }}
          limits:
            cpu: {{ .Values.workloads.overprovisionedMemory.cpuLimit }}
            memory: {{ .Values.workloads.overprovisionedMemory.memLimit }}
{{- end }}

{{- if .Values.workloads.underprovisionedCpu.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.workloads.underprovisionedCpu.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.workloads.underprovisionedCpu.name }}
    container-efficiency.io/autotune: "{{ .Values.workloads.underprovisionedCpu.autotune }}"
    container-efficiency.io/tune-cpu: "{{ .Values.workloads.underprovisionedCpu.tuneCpu }}"
    container-efficiency.io/tune-memory: "{{ .Values.workloads.underprovisionedCpu.tuneMemory }}"
    container-efficiency.io/tune-limits: "{{ .Values.workloads.underprovisionedCpu.tuneLimits }}"
spec:
  replicas: {{ .Values.workloads.underprovisionedCpu.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.workloads.underprovisionedCpu.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.workloads.underprovisionedCpu.name }}
    spec:
      containers:
      - name: {{ .Values.workloads.underprovisionedCpu.name }}
        image: {{ .Values.workloads.underprovisionedCpu.image }}
        command: {{ toYaml .Values.workloads.underprovisionedCpu.command | nindent 8 }}
        resources:
          requests:
            cpu: {{ .Values.workloads.underprovisionedCpu.cpuRequest }}
            memory: {{ .Values.workloads.underprovisionedCpu.memRequest }}
          limits:
            cpu: {{ .Values.workloads.underprovisionedCpu.cpuLimit }}
            memory: {{ .Values.workloads.underprovisionedCpu.memLimit }}
{{- end }}

{{- if .Values.workloads.spikyWorkload.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.workloads.spikyWorkload.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.workloads.spikyWorkload.name }}
    container-efficiency.io/autotune: "{{ .Values.workloads.spikyWorkload.autotune }}"
    container-efficiency.io/tune-cpu: "{{ .Values.workloads.spikyWorkload.tuneCpu }}"
    container-efficiency.io/tune-memory: "{{ .Values.workloads.spikyWorkload.tuneMemory }}"
    container-efficiency.io/tune-limits: "{{ .Values.workloads.spikyWorkload.tuneLimits }}"
spec:
  replicas: {{ .Values.workloads.spikyWorkload.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.workloads.spikyWorkload.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.workloads.spikyWorkload.name }}
    spec:
      containers:
      - name: {{ .Values.workloads.spikyWorkload.name }}
        image: {{ .Values.workloads.spikyWorkload.image }}
        command: {{ toYaml .Values.workloads.spikyWorkload.command | nindent 8 }}
        resources:
          requests:
            cpu: {{ .Values.workloads.spikyWorkload.cpuRequest }}
            memory: {{ .Values.workloads.spikyWorkload.memRequest }}
          limits:
            cpu: {{ .Values.workloads.spikyWorkload.cpuLimit }}
            memory: {{ .Values.workloads.spikyWorkload.memLimit }}
{{- end }}

{{- if .Values.workloads.partialTuning.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.workloads.partialTuning.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.workloads.partialTuning.name }}
    container-efficiency.io/autotune: "{{ .Values.workloads.partialTuning.autotune }}"
    container-efficiency.io/tune-cpu: "{{ .Values.workloads.partialTuning.tuneCpu }}"
    container-efficiency.io/tune-memory: "{{ .Values.workloads.partialTuning.tuneMemory }}"
    container-efficiency.io/tune-limits: "{{ .Values.workloads.partialTuning.tuneLimits }}"
spec:
  replicas: {{ .Values.workloads.partialTuning.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.workloads.partialTuning.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.workloads.partialTuning.name }}
    spec:
      containers:
      - name: {{ .Values.workloads.partialTuning.name }}
        image: {{ .Values.workloads.partialTuning.image }}
        command: {{ toYaml .Values.workloads.partialTuning.command | nindent 8 }}
        resources:
          requests:
            cpu: {{ .Values.workloads.partialTuning.cpuRequest }}
            memory: {{ .Values.workloads.partialTuning.memRequest }}
          limits:
            cpu: {{ .Values.workloads.partialTuning.cpuLimit }}
            memory: {{ .Values.workloads.partialTuning.memLimit }}
{{- end }}

{{- if .Values.memorySpiker.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.memorySpiker.name }}
  namespace: {{ .Values.memorySpiker.namespace }}
  labels:
    app: {{ .Values.memorySpiker.name }}
spec:
  replicas: {{ .Values.memorySpiker.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.memorySpiker.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.memorySpiker.name }}
    spec:
      containers:
      - name: {{ .Values.memorySpiker.name }}
        image: python:3.9-slim
        command:
          - "python"
          - "-c"
          - |
            import time

            # Read parameters from the environment or just inline from Helm values
            step_size_mb = {{ .Values.memorySpiker.stepSizeMB }}
            total_steps = {{ .Values.memorySpiker.totalSteps }}
            interval_sec = {{ .Values.memorySpiker.intervalSec }}

            mem_list = []
            print(f"Starting memory spike: allocating {step_size_mb} MB every {interval_sec} seconds, for {total_steps} steps.")

            for i in range(total_steps):
                # Allocate 'step_size_mb' MB by appending a large string
                chunk = "x" * (step_size_mb * 1024 * 1024)
                mem_list.append(chunk)

                current_mb = step_size_mb * (i + 1)
                print(f"Allocated ~{current_mb} MB so far. Sleeping {interval_sec}s.")
                time.sleep(interval_sec)

            print("Done allocating memory. Holding allocated memory, now idling.")
            while True:
                time.sleep(30)
        resources:
          requests:
            cpu: {{ .Values.memorySpiker.cpuRequest }}
            memory: {{ .Values.memorySpiker.memRequest }}
          limits:
            cpu: {{ .Values.memorySpiker.cpuLimit }}
            memory: {{ .Values.memorySpiker.memLimit }}
{{- end }}

{{- if .Values.workloads.cpuMemoryStress.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.workloads.cpuMemoryStress.name }}
  namespace: {{ .Values.namespace }}
  labels:
    app: {{ .Values.workloads.cpuMemoryStress.name }}
    # Add other labels if needed (auto-tune, etc.)
{{- if .Values.workloads.cpuMemoryStress.autoTuneLabels }}
    container-efficiency.io/autotune: "enabled"
    container-efficiency.io/tune-cpu: "enabled"
    container-efficiency.io/tune-memory: "enabled"
    container-efficiency.io/tune-limits: "enabled"
{{- end }}
spec:
  replicas: {{ .Values.workloads.cpuMemoryStress.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.workloads.cpuMemoryStress.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.workloads.cpuMemoryStress.name }}
    spec:
      containers:
      - name: {{ .Values.workloads.cpuMemoryStress.name }}
        image: {{ .Values.workloads.cpuMemoryStress.image }}
        imagePullPolicy: IfNotPresent
        command:
          - "python"
          - "-c"
          - |
            import time
            import math

            # We'll repeatedly allocate memory and do CPU operations in a loop
            mem_list = []

            # Memory step size in MB:
            step_size_mb = {{ .Values.workloads.cpuMemoryStress.stepSizeMb | default 20 }}
            # How many steps to allocate memory:
            total_mem_steps = {{ .Values.workloads.cpuMemoryStress.totalMemSteps | default 5 }}
            # CPU factorial loop iterations each cycle:
            cpu_factorial_loops = {{ .Values.workloads.cpuMemoryStress.cpuFactorialLoops | default 10000 }}
            # Interval in seconds between steps:
            interval_sec = {{ .Values.workloads.cpuMemoryStress.intervalSec | default 5 }}

            print(f"Starting CPU+Memory stress: Alloc {step_size_mb}MB every {interval_sec}s for {total_mem_steps} steps, factorial loops: {cpu_factorial_loops} each time.")

            allocated_mb = 0
            for i in range(total_mem_steps):
                # Memory allocation
                chunk = "x" * (step_size_mb * 1024 * 1024)
                mem_list.append(chunk)
                allocated_mb += step_size_mb

                # CPU stress: do some math.factorial calls
                # Increase or reduce loops to intensify CPU usage
                s = 0
                for _ in range(cpu_factorial_loops):
                    s += math.factorial(1000)  # just to chew CPU cycles

                print(f"Step {i+1}: allocated ~{allocated_mb} MB total, did CPU factorial loops. Sleeping {interval_sec}s.")
                time.sleep(interval_sec)

            print("All memory steps done. Now idling in a loop, still holding memory, doing periodic CPU usage.")
            # After initial steps, keep doing CPU bursts forever to maintain stress
            while True:
                # Do a quick CPU spike
                for _ in range(cpu_factorial_loops):
                    _ = math.factorial(2000)
                time.sleep(interval_sec)
        resources:
          requests:
            cpu: {{ .Values.workloads.cpuMemoryStress.resources.requests.cpu | default "100m" }}
            memory: {{ .Values.workloads.cpuMemoryStress.resources.requests.memory | default "128Mi" }}
          limits:
            cpu: {{ .Values.workloads.cpuMemoryStress.resources.limits.cpu | default "500m" }}
            memory: {{ .Values.workloads.cpuMemoryStress.resources.limits.memory | default "1Gi" }}
{{- end }}
